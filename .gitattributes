# Ensure all text files use consistent line endings across different platforms.
# Windows uses CRLF, while Unix-like systems (Linux, macOS) use LF.
# This setting makes Git automatically handle line endings during checkout and commit.
* text=auto

# Mark image files as binary.
# Git will treat these files as binary, preventing unnecessary attempts to diff or merge them.
*.png binary
*.jpg binary
*.jpeg binary
*.gif binary

# Treat executable files as binary to avoid unexpected diffs or merges.
# This includes compiled programs, scripts, or any binary executables.
*.exe binary
*.dll binary

# Special handling for Jupyter Notebook files (.ipynb).
# These are JSON-based but are best treated as binary for Git to avoid conflicts during merges.
*.ipynb merge=binary

# Prevent diffs for coverage reports generated by tools like pytest-cov.
# These files are binary and are regenerated frequently, so they don't need to be version-controlled.
*.coverage binary

# Prevent diffs for lock files or environment-specific data.
# These files are typically used for package management or build consistency and are not human-readable.
Pipfile.lock binary
*.lock binary

# Ignore build artifacts and distribution files (e.g., compiled Python files or archives).
# Mark these files as binary to avoid unnecessary diffs.
*.pyc binary
*.pyo binary
*.egg binary
*.whl binary
*.tar.gz binary
*.zip binary

# Handle configuration or environment files securely.
# These files may contain sensitive data or are system-specific, so mark them as binary if necessary.
*.ini text
*.yaml text
*.env text

# Ignore operating system-specific metadata files.
# These are not part of the source code and should be treated as binary to avoid conflicts.
.DS_Store binary
Thumbs.db binary
